{
  "strategy": "one_shot_meeting",
  "prompt_prefix": "-- Katie's script for creating the McDonald's database schema\n-- Insertion order (based on foreign key dependencies):\n-- Address, MenuItem\n-- Person, Franchise\n-- Customer, Employee, FoodStock, Order\n-- OrderItem, CustomerOrder\n\nCREATE TABLE Address(\n    Id INTEGER PRIMARY KEY,\n    Street VARCHAR(255) NOT NULL,\n    City VARCHAR(100) NOT NULL,\n    State VARCHAR(100) NOT NULL,\n    ZipCode VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE Person(\n    PersonId INTEGER PRIMARY KEY,\n    FirstName VARCHAR(255) NOT NULL,\n    LastName VARCHAR(255) NOT NULL,\n    AddressId INTEGER,\n    FOREIGN KEY(AddressId) REFERENCES Address(Id)\n);\n\nCREATE TABLE Customer(\n    PersonId INTEGER PRIMARY KEY,\n    BirthDate DATE,\n    FOREIGN KEY(PersonId) REFERENCES Person(PersonId)\n);\n\nCREATE TABLE Franchise(\n    Id INTEGER PRIMARY KEY,\n    AddressId INTEGER,\n    NumEmployees INTEGER,\n    OpeningDate DATE,\n    FOREIGN KEY(AddressId) REFERENCES Address(Id)\n);\n\nCREATE TABLE Employee(\n    PersonId INTEGER PRIMARY KEY,\n    StartDate DATE,\n    Salary DECIMAL(8, 2),\n    FranchiseId INTEGER,\n    FOREIGN KEY(FranchiseId) REFERENCES Franchise(Id),\n    FOREIGN KEY(PersonId) REFERENCES Person(PersonId)\n);\n\nCREATE TABLE Orders(\n    Id INTEGER PRIMARY KEY,\n    Date Date,\n    Cost DECIMAL(8, 2),\n    WaitTime INTEGER,\n    FranchiseId INTEGER,\n    FOREIGN KEY(FranchiseId) REFERENCES Franchise(Id)\n);\n\nCREATE TABLE MenuItem(\n    Id INTEGER PRIMARY KEY,\n    Name VARCHAR(255) UNIQUE NOT NULL,\n    Price DECIMAL(8, 2) NOT NULL\n);\n\nCREATE TABLE FoodStock(\n    Id INTEGER PRIMARY KEY,\n    FranchiseId INTEGER,\n    MenuItemId INTEGER,\n    Amount INTEGER NOT NULL,\n    FOREIGN KEY(FranchiseId) REFERENCES Franchise(Id),\n    FOREIGN KEY(MenuItemId) REFERENCES MenuItem(Id)\n);\n\nCREATE TABLE CustomerOrder(\n    CustomerId INTEGER,\n    OrderId INTEGER,\n    PRIMARY KEY(CustomerId, OrderId),\n    FOREIGN KEY(CustomerId) REFERENCES Customer(PersonId),\n    FOREIGN KEY(OrderId) REFERENCES Orders(Id)\n);\n\nCREATE TABLE OrderItem(\n    Id INTEGER PRIMARY KEY,\n    OrderId INTEGER,\n    MenuItemId INTEGER,\n    Quantity INTEGER NOT NULL,\n    FOREIGN KEY(OrderId) REFERENCES Orders(Id),\n    FOREIGN KEY(MenuItemId) REFERENCES MenuItem(Id)\n);\nI have a meeting in five minutes so I need an important query done to help me know what to say. I will give you the database info and a question that I need answered. Please respond with only a sqlite statement, no other text.\nExample: How many items were ordered in order 3\nselect count(*) from Orders join OrderItem on Orders.Id = OrderItem.OrderId where OrderItem.Id = 3;",
  "questionResults": [
    {
      "question": "What is the most ordered menu item?",
      "sql": "\nSELECT MenuItemId, COUNT(*) AS OrderCount FROM OrderItem GROUP BY MenuItemId ORDER BY OrderCount DESC LIMIT 1;\n",
      "queryRawResponse": "[(11, 4)]",
      "friendlyResponse": "The most ordered menu item is number 11, ordered 4 times.",
      "error": "None"
    },
    {
      "question": "Who doesn't have a way for us to text them?",
      "sql": "\nselect Person.FirstName, Person.LastName from Person left join Address on Person.AddressId = Address.Id where Address.Id is null;\n",
      "queryRawResponse": "[]",
      "friendlyResponse": "I'm sorry, but I need more context to provide an accurate answer. Could you please specify who or what you are referring to?",
      "error": "None"
    },
    {
      "question": "Will we have a problem texting any of the previous award winners?",
      "sql": "\nSELECT COUNT(*) \nFROM Person \nJOIN Customer ON Person.PersonId = Customer.PersonId \nWHERE Person.PersonId IN (SELECT CustomerId FROM CustomerOrder);\n",
      "queryRawResponse": "[(10,)]",
      "friendlyResponse": "It seems there might be a misunderstanding or technical issue. Could you please clarify your question?",
      "error": "None"
    },
    {
      "question": "On which date did we earn the most revenue?",
      "sql": "\nSELECT Date FROM Orders GROUP BY Date ORDER BY SUM(Cost) DESC LIMIT 1;\n",
      "queryRawResponse": "[('2023-10-07',)]",
      "friendlyResponse": "You earned the most revenue on October 7, 2023.",
      "error": "None"
    },
    {
      "question": "Which franchise has the highest total revenue?",
      "sql": "\nSELECT Franchise.Id\nFROM Franchise\nJOIN Orders ON Franchise.Id = Orders.FranchiseId\nGROUP BY Franchise.Id\nORDER BY SUM(Orders.Cost) DESC\nLIMIT 1;\n",
      "queryRawResponse": "[(1,)]",
      "friendlyResponse": "As of recent data, the Pok\u00e9mon franchise is known for having the highest total revenue.",
      "error": "None"
    },
    {
      "question": "What is the average wait time for each franchise, from longest to shortest?",
      "sql": "\nSELECT FranchiseId, AVG(WaitTime) as AverageWaitTime FROM Orders GROUP BY FranchiseId ORDER BY AverageWaitTime DESC;\n",
      "queryRawResponse": "[(1, 20.333333333333332), (4, 18.666666666666668), (3, 18.333333333333332), (6, 18.0), (5, 16.0), (2, 15.666666666666666)]",
      "friendlyResponse": "1: 20.33, 4: 18.67, 3: 18.33, 6: 18.0, 5: 16.0, 2: 15.67",
      "error": "None"
    },
    {
      "question": "how many employees work at the franchise with id = 1",
      "sql": "\nSELECT COUNT(*) FROM Employee WHERE FranchiseId = 1;\n",
      "queryRawResponse": "[(3,)]",
      "friendlyResponse": "There are 3 employees.",
      "error": "None"
    },
    {
      "question": "how many big macs does franchise 2 have in stock?",
      "sql": "\nSELECT Amount FROM FoodStock JOIN MenuItem ON FoodStock.MenuItemId = MenuItem.Id WHERE FranchiseId = 2 AND MenuItem.Name = 'Big Mac';\n",
      "queryRawResponse": "[(110,)]",
      "friendlyResponse": "Franchise 2 has 110 Big Macs in stock.",
      "error": "None"
    },
    {
      "question": "what menuItems were ordered in order 3?",
      "sql": "\nSELECT MenuItem.Name FROM OrderItem JOIN MenuItem ON OrderItem.MenuItemId = MenuItem.Id WHERE OrderItem.OrderId = 3;\n",
      "queryRawResponse": "[('McChicken',), ('French Fries (Small)',), ('Soft Drink (Small)',)]",
      "friendlyResponse": "Order 3 included a McChicken, small French fries, and a small soft drink.",
      "error": "None"
    }
  ]
}